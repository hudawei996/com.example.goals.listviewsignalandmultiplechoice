package com.example.goals.listviewsignalandmultiplechoice;import android.app.Activity;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Bundle;import android.util.Log;import com.example.goals.listviewsignalandmultiplechoice.activity.LaunchActivity;import com.example.goals.listviewsignalandmultiplechoice.crash.DroidUncaughtExceptionHandler;import com.example.goals.listviewsignalandmultiplechoice.crash.SimpleUncaughtExceptionHandler;import com.example.goals.listviewsignalandmultiplechoice.util.LogUtil;import static android.content.ContentValues.TAG;/** * Created by huyongqiang on 2017/3/29. */public class MyApp extends MultiDexApplication {    private static MyApp instance;    private int appCount;    private long appStoppedTime;    private final static long SPLASH_SHOW_INTERVAL = 5 * 1000;//5sec    public static MyApp getInstance() {        return instance;    }    private static final String LOGTAG = "DroidApplication";    @Override    public void onCreate() {        super.onCreate();        instance = this;        initActivityLifecycleCallbacks();        //注册默认的异常处理        //Thread.setDefaultUncaughtExceptionHandler(new SimpleUncaughtExceptionHandler());        Thread.setDefaultUncaughtExceptionHandler(new DroidUncaughtExceptionHandler(this));    }    private void initActivityLifecycleCallbacks() {        registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacks() {            @Override            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {            }            @Override            public void onActivityStarted(Activity activity) {                Log.d(TAG, "onActivityStarted: activity开始了");                if (appCount == 0) {                    onAppStarted(activity);                }                appCount++;            }            @Override            public void onActivityResumed(Activity activity) {                Log.d(TAG, "onActivityResumed: activity恢复了");                StatManager.onResume(activity);            }            @Override            public void onActivityPaused(Activity activity) {                Log.d(TAG, "onActivityPaused: activity暂停了");                StatManager.onPause(activity);            }            @Override            public void onActivityStopped(Activity activity) {                Log.d(TAG, "onActivityStopped: activity停止了");                appCount--;                if (appCount == 0) {                    onAppStopped(activity);                }            }            @Override            public void onActivitySaveInstanceState(Activity activity, Bundle outState) {            }            @Override            public void onActivityDestroyed(Activity activity) {                Log.d(TAG, "onActivityDestroyed: activity销毁了");            }        });    }    private boolean shouldShowSplash() {        //return appStoppedTime != 0 && appStoppedTime + SPLASH_SHOW_INTERVAL < System        // .currentTimeMillis();        return true;    }    private void onAppStarted(Activity activity) {        if (!(activity instanceof LaunchActivity) && shouldShowSplash()) {            LaunchActivity.startAct(activity, LaunchActivity.SPLASH_TYPE_COMMON);        }    }    private void onAppStopped(Activity activity) {        appStoppedTime = System.currentTimeMillis();    }    private String test = null;    public boolean isTest() {        if (test == null) {            try {                PackageInfo info = getPackageManager().getPackageInfo(                        this.getPackageName(), PackageManager.GET_META_DATA);                test = info.applicationInfo.metaData.getString("APP_TEST");                String channel = info.applicationInfo.metaData.getString("UMENG_APPKEY");                String changName = info.applicationInfo.metaData.getString("UMENG_CHANNEL");                LogUtil.d("AppInstance", "channel," + channel + ",channelName," + changName);            } catch (PackageManager.NameNotFoundException e) {                e.printStackTrace();            }        }        return "yes".equals(test);    }    public void exit() {        System.exit(1);    }}